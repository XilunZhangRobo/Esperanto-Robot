Plan:

1. Open the gripper.
2. Get the graspable point of cubeA.
3. Move to the position above cubeA.
4. Move down to grasp cubeA.
5. Close the gripper to grasp cubeA.
6. Lift cubeA up.
7. Get the size of cubeA and cubeB.
8. Calculate the position to place cubeA on cubeB.
9. Move to the position above the calculated position.
10. Move down to place cubeA on cubeB.
11. Open the gripper to release cubeA.
12. Lift the gripper up.
13. Get the graspable point of ballA.
14. Move to the position above ballA.
15. Move down to grasp ballA.
16. Close the gripper to grasp ballA.
17. Lift ballA up.
18. Calculate the position to place ballA on cubeA.
19. Move to the position above the calculated position.
20. Move down to place ballA on cubeA.
21. Open the gripper to release ballA.

Python Code:

```python
import numpy as np

# Step 1
open_gripper()

# Step 2
cubeA_graspable_point = get_graspable_point('cubeA')

# Step 3
move_to_position(cubeA_graspable_point + np.array([0, 0, 1]))

# Step 4
move_to_position(cubeA_graspable_point)

# Step 5
close_gripper()

# Step 6
move_to_position(cubeA_graspable_point + np.array([0, 0, 1]))

# Step 7
cubeA_size = get_size('cubeA')
cubeB_size = get_size('cubeB')

# Step 8
cubeB_top_center = get_graspable_point('cubeB') + np.array([0, 0, cubeB_size[2]])

# Step 9
move_to_position(cubeB_top_center + np.array([0, 0, cubeA_size[2]]))

# Step 10
move_to_position(cubeB_top_center)

# Step 11
open_gripper()

# Step 12
move_to_position(cubeB_top_center + np.array([0, 0, 1]))

# Step 13
ballA_graspable_point = get_graspable_point('ballA')

# Step 14
move_to_position(ballA_graspable_point + np.array([0, 0, 1]))

# Step 15
move_to_position(ballA_graspable_point)

# Step 16
close_gripper()

# Step 17
move_to_position(ballA_graspable_point + np.array([0, 0, 1]))

# Step 18
cubeA_top_center = cubeB_top_center + np.array([0, 0, cubeA_size[2]])

# Step 19
move_to_position(cubeA_top_center + np.array([0, 0, 1]))

# Step 20
move_to_position(cubeA_top_center)

# Step 21
open_gripper()
```
Please note that the above code assumes that the z-axis is the vertical direction and the origin of the object is at its bottom center. The code also assumes that the sizes of the objects are 1D numpy arrays with 3 elements representing the length, width, and height of the objects. The code also assumes that the positions of the objects are 1D numpy arrays with 3 elements representing the x, y, and z coordinates of the objects.