Plan:

1. Open the gripper.
2. Get the graspable point of cubeA.
3. Move to the position above cubeA.
4. Move down to the graspable point of cubeA.
5. Close the gripper to grasp cubeA.
6. Lift cubeA up.
7. Get the top point of cubeB.
8. Move to the position above cubeB.
9. Move down to the top of cubeB.
10. Open the gripper to place cubeA on top of cubeB.
11. Move up to avoid collision with the stacked cubes.

Python Code:

```python
import numpy as np

# Step 1: Open the gripper
open_gripper()

# Step 2: Get the graspable point of cubeA
cubeA_graspable_point = get_graspable_point('cubeA')

# Step 3: Move to the position above cubeA
move_to_position(cubeA_graspable_point + np.array([0, 0, 1]))

# Step 4: Move down to the graspable point of cubeA
move_to_position(cubeA_graspable_point)

# Step 5: Close the gripper to grasp cubeA
close_gripper()

# Step 6: Lift cubeA up
move_to_position(cubeA_graspable_point + np.array([0, 0, 1]))

# Step 7: Get the top point of cubeB
cubeB_size = get_size('cubeB')
cubeB_top_point = get_graspable_point('cubeB') + np.array([0, 0, cubeB_size[2]])

# Step 8: Move to the position above cubeB
move_to_position(cubeB_top_point + np.array([0, 0, 1]))

# Step 9: Move down to the top of cubeB
move_to_position(cubeB_top_point)

# Step 10: Open the gripper to place cubeA on top of cubeB
open_gripper()

# Step 11: Move up to avoid collision with the stacked cubes
move_to_position(cubeB_top_point + np.array([0, 0, 1]))
```

This code assumes that the z-axis is the vertical direction and the gripper is initially positioned such that it does not collide with any objects when moving. The code also assumes that the `get_graspable_point` function returns the center of the bottom face of the cube and the `get_size` function returns the size of the cube as a numpy array in the format [length, width, height].