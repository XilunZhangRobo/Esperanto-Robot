"Sure, I'll generate three more datapoints following the given format. \n\n```json\n[\n    {\n        \"task\": \"Task is to place 'bottleA' on top of 'cubeA' and 'cubeB'. Ensure it's balanced and stable.\",\n        \"instructions\": \"You are a robotic arm with intelligent planning abilities. Your task would be generating the python code with parameterized skills (open_gripper(), close_gripper(), move_to_position(), get_graspable_point(), get_size()) that achieves the results provided by the user. Please generate executable python code that uses given pre-scripted parameterized skills. Please also remember you need to import corresponding package first before you run the code. Think carefully about your plans and code. When you generate plans, you should think about the spatial relation more carefully. For example: You are trying to grab an object. Answer: Your plan should be move to top of it first, and then move down to grasp it. If you directly move to that position, the gripper might push the object away. Think of it as a two step process. After the process, you need to think about whether the gripper would hit the object while it is moving to the next position. Here is an example code piece that you could refer to, which shows how you call the function:\",\n        \"example_code\": \"import numpy as np  # import numpy because we are using it below\\n\\nopen_gripper()\\nclose_gripper()\\n# Get the graspable point of cubeA\\ncubeA_graspable_point = get_graspable_point('cubeA')\\n\\n# Get size of cubeA\\ncubeA_size = get_size('cubeA')\\n\\nmove_to_position(cubeA_graspable_point)\",\n        \"plans\": [\n            \"1. Move the gripper to cubeA and grasp it.\",\n            \"2. Stack cubeA on cubeB.\",\n            \"3. Move the gripper to bottleA and grasp it.\",\n            \"4. Carefully place bottleA on top of the stacked cubes.\"\n        ],\n        \"code\": \"import numpy as np\\n\\nopen_gripper()\\n\\n# Get the graspable point and size of cubeA\\ncubeA_graspable_point = get_graspable_point('cubeA')\\ncubeA_size = get_size('cubeA')\\n\\n# Get the graspable point and size of cubeB\\ncubeB_graspable_point = get_graspable_point('cubeB')\\ncubeB_size = get_size('cubeB')\\n\\n# Get the graspable point and size of bottleA\\nbottleA_graspable_point = get_graspable_point('bottleA')\\nbottleA_size = get_size('bottleA')\\n\\n# Move to and grasp cubeA\\nmove_to_position(cubeA_graspable_point)\\nclose_gripper()\\n\\n# Move cubeA to position above cubeB and place it down\\ncubeB_top_position = [cubeB_graspable_point[0], cubeB_graspable_point[1], cubeB_graspable_point[2] + cubeB_size[2]]\\nmove_to_position(cubeB_top_position)\\nopen_gripper()\\n\\n# Move to and grasp bottleA\\nmove_to_position(bottleA_graspable_point)\\nclose_gripper()\\n\\n# Move bottleA to position above stacked cubes and place it down\\ncubeA_top_position = [cubeB_top_position[0], cubeB_top_position[1], cubeB_top_position[2] + cubeA_size[2]]\\nbottleA_top_position = [cubeA_top_position[0], cubeA_top_position[1], cubeA_top_position[2] + bottleA_size[2]]\\nmove_to_position(bottleA_top_position)\\nopen_gripper()\"\n    },\n    {\n        \"task\": \"Task is to place 'cubeB' on top of 'cubeC' and 'cubeD'. Ensure it's balanced and stable.\",\n        \"instructions\": \"You are a robotic arm with intelligent planning abilities. Your task would be generating the python code with parameterized skills (open_gripper(), close_gripper(), move_to_position(), get_graspable_point(), get_size()) that achieves the results provided by the user. Please generate executable python code that uses given pre-scripted parameterized skills. Please also remember you need to import corresponding package first before you run the code. Think carefully about your plans and code. When you generate plans, you should think about the spatial relation more carefully. For example: You are trying to grab an object. Answer: Your plan should be move to top of it first, and then move down to grasp it. If you directly move to that position, the gripper might push the object away. Think of it as a two step process. After the process, you need to think about whether the gripper would hit the object while it is moving to the next position. Here is an example code piece that you could refer to, which shows how you call the function:\",\n        \"example_code\": \"import numpy as np  # import numpy because we are using it below\\n\\nopen_gripper()\\nclose_gripper()\\n# Get the graspable point of cubeA\\ncubeA_graspable_point = get_graspable_point('cubeA')\\n\\n# Get size of cubeA\\ncubeA_size = get_size('cubeA')\\n\\nmove_to_position(cubeA_graspable_point)\",\n        \"plans\": [\n            \"1. Move the gripper to cubeC and grasp it.\",\n            \"2. Stack cubeC on cubeD.\",\n            \"3. Move the gripper to cubeB and grasp it.\",\n            \"4. Carefully place cubeB on top of the stacked cubes.\"\n        ],\n        \"code\": \"import numpy as np\\n\\nopen_gripper()\\n\\n# Get the graspable point and size of cubeC\\ncubeC_graspable_point = get_graspable_point('cubeC')\\ncubeC_size = get_size('cubeC')\\n\\n# Get the graspable point and size of cubeD\\ncubeD_graspable_point = get_graspable_point('cubeD')\\ncubeD_size = get_size('cubeD')\\n\\n# Get the graspable point and size of cubeB\\ncubeB_graspable_point = get_graspable_point('cubeB')\\ncubeB_size = get_size('cubeB')\\n\\n# Move to and grasp cubeC\\nmove_to_position(cubeC_graspable_point)\\nclose_gripper()\\n\\n# Move cubeC to position above cubeD and place it down\\ncubeD_top_position = [cubeD_graspable_point[0], cubeD_graspable_point[1], cubeD_graspable_point[2] + cubeD_size[2]]\\nmove_to_position(cubeD_top_position)\\nopen_gripper()\\n\\n# Move to and grasp cubeB\\nmove_to_position(cubeB_graspable_point)\\nclose_gripper()\\n\\n# Move cubeB to position above stacked cubes and place it down\\ncubeC_top_position = [cubeD_top_position[0], cubeD_top_position[1], cubeD_top_position[2] + cubeC_size[2]]\\ncubeB_top_position = [cubeC_top_position[0], cubeC_top_position[1], cubeC_top_position[2] + cubeB_size[2]]\\nmove_to_position(cubeB_top_position)\\nopen_gripper()\"\n    },\n    {\n        \"task\": \"Task is to place 'cubeA' on top of 'ballA'. Note that this task will fail due to instability.\",\n        \"instructions\": \"You are a robotic arm with intelligent planning abilities. Your task would be generating the python code with parameterized skills (open_gripper(), close_gripper(), move_to_position(), get_graspable_point(), get_size()) that achieves the results provided by the user. Please generate executable python code that uses given pre-scripted parameterized skills. Please also remember you need to import corresponding package first before you run the code. Think carefully about your plans and code. When you generate plans, you should think about the spatial relation more carefully. For example: You are trying to grab an object. Answer: Your plan should be move to top of it first, and then move down to grasp it. If you directly move to that position, the gripper might push the object away. Think of it as a two step process. After the process, you need to think about whether the gripper would hit the object while it is moving to the next position. Here is an example code piece that you could refer to, which shows how you call the function:\",\n        \"example_code\": \"import numpy as np  # import numpy because we are using it below\\n\\nopen_gripper()\\nclose_gripper()\\n# Get the graspable point of cubeA\\ncubeA_graspable_point = get_graspable_point('cubeA')\\n\\n# Get size of cubeA\\ncubeA_size = get_size('cubeA')\\n\\nmove_to_position(cubeA_graspable_point)\",\n        \"plans\": [\n            \"1. Move the gripper to ballA and grasp it.\",\n            \"2. Place ballA on a flat surface.\",\n            \"3. Move the gripper to cubeA and grasp it.\",\n            \"4. Attempt to place cubeA on top of ballA, which will fail due to instability.\"\n        ],\n        \"code\": \"import numpy as np\\n\\nopen_gripper()\\n\\n# Get the graspable point and size of ballA\\nballA_graspable_point = get_graspable_point('ballA')\\nballA_size = get_size('ballA')\\n\\n# Get the graspable point and size of cubeA\\ncubeA_graspable_point = get_graspable_point('cubeA')\\ncubeA_size = get_size('cubeA')\\n\\n# Move to and grasp ballA\\nmove_to_position(ballA_graspable_point)\\nclose_gripper()\\n\\n# Move ballA to a flat surface position and place it down\\nflat_surface_position = [0.5, 0.5, ballA_size[2]]\\nmove_to_position(flat_surface_position)\\nopen_gripper()\\n\\n# Move to and grasp cubeA\\nmove_to_position(cubeA_graspable_point)\\nclose_gripper()\\n\\n# Move cubeA to position above ballA and attempt to place it down\\nballA_top_position = [flat_surface_position[0], flat_surface_position[1], flat_surface_position[2] + ballA_size[2]]\\ncubeA_top_position = [ballA_top_position[0], ballA_top_position[1], ballA_top_position[2] + cubeA_size[2]]\\nmove_to_position(cubeA_top_position)\\nopen_gripper()\"\n    }\n]\n```"